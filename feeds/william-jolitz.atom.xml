<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>William Jolitz's 386bsd Notebook - William Jolitz</title><link href="/" rel="alternate"></link><link href="/feeds/william-jolitz.atom.xml" rel="self"></link><id>/</id><updated>2019-04-25T15:35:00-07:00</updated><entry><title>Commit on missing "privilege" Note</title><link href="/commit-on-missing-privilege-note.html" rel="alternate"></link><published>2019-04-25T10:27:00-07:00</published><updated>2019-04-25T15:35:00-07:00</updated><author><name>William Jolitz</name></author><id>tag:None,2019-04-25:/commit-on-missing-privilege-note.html</id><summary type="html">&lt;p&gt;Discussing Role-Based Security and 386BSD's role in introducing innovation on the operating system security model.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Came across an omission when testing LBA support for 386BSD (shush - that's for later, as 386bsd only supported CHS).
There was a missing privledge, &lt;a href="https://github.com/386bsd/386bsd/commit/0299693e520ff85b61f10b10c1c406a16b125c5d"&gt;easily added in&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Literally there are thousands of things that happen when you do an system release.
Everytime you'd do a release (I did them for Berkeley on the PDP 11, for National Semiconductor on the NS16032, a vareity of start-ups, and ... 386bsd of course).
You'd get used to a stream of emails with "add this in here, it does this".
They'd be concious of the fact that you'd be overloaded, so they'd carefully think about the omission, how to word it, ... because they'd be afraid.
That it wouldn't make it into the next release because it was too obtuse (or wrong) or time consuming, so it would be skipped.
I never knew how valuable this was, and took it for granted.&lt;/p&gt;
&lt;p&gt;One of the surprises with 386BSD was that the volume of such "input" was exponentially more (not that surprising) as well as "not" carefully thought.
They'd decided it was "customer support", not assisting a research project (carefully labeled such from the start, to avoid this confusion).
And with the magazine CDROM, by contract support and rerelease of any follow-ons were the responsibility of the publisher.
(We'd done a product (Symmetric S/375 Symmetrix) with $1K/unit bundled support contracts, so we knew this from the start.)
We were just involved with improving the research on 386BSD. 
All of this didn't matter.&lt;/p&gt;
&lt;p&gt;Role based security and 386BSD was mentioned in our Dr Dobbs article 
&lt;a href="https://386bsd.org/releases/rolebased-network-security-network-security-at-the-operatingsystem-level-article"&gt;Network security at the operating-system level&lt;/a&gt;a,
and later in Chapter 7 of The Basic Kernel book, Source Code Secrets series.&lt;/p&gt;
&lt;p&gt;Most didn't bother to read anything, where the main point of 386BSD being a "living example" was dead to them.
That's why the article series, talks, and books were being generated.
So they would be read and used.&lt;/p&gt;
&lt;p&gt;Apparently that wasn't understood.&lt;/p&gt;
&lt;p&gt;So the only reference I could find to this "bug" had the guy ripping out the role based security, instead of the teeny, tiny commit that you see it needed.&lt;/p&gt;
&lt;p&gt;The "why" behind role based security is another story entirely.&lt;/p&gt;
&lt;p&gt;It came out of my consulting on operating systems security.
I had done the architecture for B1 labelled security for government systems, including those by Hewlett Packard.
These systems had huge bit vectors of discrete privilege "bits", that were unweildy to manage.&lt;/p&gt;
&lt;p&gt;In the "Orange" and "Green" books (government NCSC) they suggested these might be "compressed" into "roles".
And that these roles might be assigned to secure paths of access.
As independent to cryptography/secrets/passwords/credentials.
Some of us thought that any code could be broken (or subverted).
But if you structured things around access path, your could reduce exposure.&lt;/p&gt;
&lt;p&gt;Post 0.1 386BSD releases were under a barrage of criticism.
That certain research work wasn't but someone elses ideas.
So suddenly much that wasn't on the development agenda suddenly needed to be justified.&lt;/p&gt;
&lt;p&gt;The most simplified version of role based security was added in, and we expected we'd miss much.
From the book:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Section 7.2, bottom of page 352" src="/image/the_basic_kernel_7_2a.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Section 7.2, top of page 353" src="/image/the_basic_kernel_7_2b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;In other words, it was a demonstration of the concept with the direct benefit of reducing the scope of even compromising root over any network.
Not the end by any means, but an illustration of a beginning.&lt;/p&gt;
&lt;p&gt;This allows for an intermediate gateway to interpose for access (like the way a fileserver functions), an RPC tracer, an insertion of an audit log, and a back call framework into the user space library to allow a security library to take action on potential intrusion.&lt;/p&gt;
&lt;p&gt;So, a stub that other things could attach to.&lt;/p&gt;
&lt;p&gt;Since this was written, several million intrusions into BSD systems, including OpenBSD, have occured that was the point of this stub and framework. How far should this be continued is something I'm considering.&lt;/p&gt;
&lt;p&gt;Perhaps a reason for reading articles, books, and alternative approaches. Or even ... notebook entries? Take care.&lt;/p&gt;</content><category term="first"></category><category term="386bsd"></category><category term="tale"></category></entry><entry><title>Include 'nonstd' Usage Note</title><link href="/include-nonstd-usage-note.html" rel="alternate"></link><published>2019-01-15T12:46:00-08:00</published><updated>2019-01-15T14:35:00-08:00</updated><author><name>William Jolitz</name></author><id>tag:None,2019-01-15:/include-nonstd-usage-note.html</id><summary type="html">&lt;p&gt;Documenting point of the 1.0+ /usr/include/nonstd "tree" for access to nonstandard include files to not overlay standard ones.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the rush that nearly every BSD release entailed, things get forgotten. With 1.0, much was going in and much was going out. I'd found that keeping track of all the shibboleths present, in both catagories, was a major nusance.
It also didn't help that for various reasons things were being dragged off in different directions in the basic include files, where whole trees of them were being retained simply to keep coherence on each of these.&lt;/p&gt;
&lt;p&gt;On top of that, one of the points of 1.0 was to separate out stuff so that old/new could be factored out/in smoothly w/o messing up standards coherence. So part of this was /usr/include/nonstd. One place to collect up these differences.&lt;/p&gt;
&lt;p&gt;The basic idea was to keep pathnames solely in build tools, and just allow include/interface files to be embedded in code, where they would be satisfied by include paths directed through nonstd, ahead of other/primary includes.&lt;/p&gt;
&lt;p&gt;Put back in the &lt;a href="https://github.com/386bsd/386bsd/blob/1.0/usr/include/nonstd/README"&gt;README&lt;/a&gt; in &lt;a href="https://github.com/386bsd/386bsd/tree/1.0/usr/include/nonstd"&gt;/usr/include/nonstd&lt;/a&gt; to document this (normally there are no README's in the include hierarchy).&lt;/p&gt;
&lt;p&gt;It's not a perfect means of doing this, because of name collisions. But it was "good enough" for the expedient of getting on with the shuffle of old out, newer in place, then what was desired to replace it refactored in.&lt;/p&gt;
&lt;p&gt;Originally, 386bsd started just as a means to keep alive a bit rotted BSD only running on obsolete VAX/CCI Power machines, thus had a lot of cruft that still persists to this day in all other BSDs. The "0." releases were labeled such because they were a holding pattern, where the intent was for the discord of the moment to wane, and people would put things back into "one BSD" afterward. There wasn't supposed to be a "1.0" at all.&lt;/p&gt;
&lt;p&gt;(There was a "0.2", as well as "1.n" (and a 2.0). 0.2 got nixed because of increased discord of just about every institution on the planet (0.1 got too successful, others wanted own *bsd, those "helping" didn't like where it was heading so "slow walked" things - specifically all additions had to be ascribed to us solely out of publishers issues, and many sought to not allow that because they were wrongly advised to insist on attribution). The magazine who commissioned 1.0 was scrupluous about avoiding conflicts, with a yanked commitment to follow-on/support while the next changes were under test - so no "1.n" - they just issued the one CDROM without anything else, which was frustrating.)&lt;/p&gt;
&lt;p&gt;In general it got hard to fight all the "nos" when there weren't any "yeses".&lt;/p&gt;
&lt;p&gt;So coincident with 1.0 was the need to reflect all the other standards without embedding any of them, because 386bsd wasn't going to follow any of those directions. Thus the need for "nonstd". Anything that didn't fit with the "core" was "compartmentalized" so as to draw a distinction/"bright line".&lt;/p&gt;
&lt;p&gt;Is it a good idea on its own? Unsure. Since it was never noticed and thus didn't get any traction, there wasn't any feedback whatsoever. It'll continue with the ".x" release because it still serves its purpose.&lt;/p&gt;</content><category term="first"></category><category term="386bsd"></category><category term="tale"></category></entry><entry><title>Tracking down random jam</title><link href="/tracking-down-random-jam-tale.html" rel="alternate"></link><published>2018-12-28T11:51:00-08:00</published><updated>2018-12-26T12:02:00-08:00</updated><author><name>William Jolitz</name></author><id>tag:None,2018-12-28:/tracking-down-random-jam-tale.html</id><summary type="html">&lt;p&gt;How a random hang in the 386bsd kernel was found, and ways to diagnose that were used. First tale.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Took me months to track down an irritating hang. The exact same kernel would work perfectly, then not. On certain hardware/VM's it would never fail, on others it would never work, and on some it would be "in between", sort of like a certain children's story (Goldilocks and the Three Bears).&lt;/p&gt;
&lt;p&gt;If you want to avoid "TL;DR", put this bit of assembler in locore.s before swtch() relies on interrupts to wake up the next process:&lt;/p&gt;
&lt;pre&gt;&lt;code class="c"&gt;
    cli  /* begin reset 8259's */
    movb $0x11, %al
    outb %al, $0x20
    movb $0x20, %al
    outb %al, $0x21
    movb $0x04, %al
    outb %al, $0x21
    movb $0x01, %al
    outb %al, $0x21
    movb $0xff, %al
    outb %al, $0x21
    movb $0x02, %al
    outb %al, $0x20

    movb $0x11, %al
    outb %al, $0xa0
    movb $0x28, %al
    outb %al, $0xa1
    movb $0x02, %al
    outb %al, $0xa1
    movb $0x01, %al
    outb %al, $0xa1
    movb $0xff, %al
    outb %al, $0xa1
    movb $0x02, %al
    outb %al, $0xa0

    call _wdredo
    sti
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The quick answer was that the 8259 PIC's (X86 original interrupt control unit) state was getting trashed. So by finding this out and forcing reinitilization (plus forcing a "redo" of a potentially "lost" disk interrupt), the random hangs didn't happen. (Left out for brevity are the necessary 'write posts' and 'read delays' for marginal chipsets that required bus setup and hold "recovery" time to properly function).&lt;/p&gt;
&lt;p&gt;The longer answer is the more interesting part - how do you track down such, where do you look, what are you up against, and how to get to the bottom of why this happens, so that this is correctly mitigated.&lt;/p&gt;
&lt;p&gt;The 8259 is a cranky design - hidden registers you can't read only write, certain operations only in a specific order, many implementations with different flaws. With the earliest version of 386bsd, the only "recipe" that was stable was one that DOS (and later Windows) used, and often was suboptimal. Which didn't matter because early PC's functioned erratically due to cost evasion - "busy waiting" and no DMA common.&lt;/p&gt;
&lt;p&gt;Didn't have hypervisors and X86 VM's then, or the memory to allow them (2MB 16Mhz ISA motherboard). But now that I do, checking the 8259's internal state showed it was set improperly when jammed, otherwise fine. So blindly resetting it when needed like above made it work.&lt;/p&gt;
&lt;p&gt;Modifying the VM's code itself let me find where the program counter was when the change occurred. It was on recovery from stray interrupts, another misfeature of the 8259. If an interrupt is signalled but appears to be withdrawn (not there) when handled, it's considered a stray interrupt, which can happen before or after or not with a true handled interrupt (had they afforded a tiny stack in the 8259 to record state, but this was back when every single gate was minimized so as to increase the number of dice per wafer).&lt;/p&gt;
&lt;p&gt;This explains why it was inconsistent in presentation - the hang/no hang was idiosyncratic, depending on timing. With the VM emulator, switching between cpu types would allow it to work, then not, because the effective "sampling" would be different, just like with different hardware chipsets/speed/delays.&lt;/p&gt;
&lt;p&gt;How far down the "rathole" do you go with a open source system to support architecture flaws? Clearly enough to allow it to be useful, but at some point it obfuscates both clarity of the code as well as performance. Current Spectre/Meltdown/other bugs tickle this for modern systems to a much greater degree, as they reach into and distort things that are otherwise clear, and will have to be tediously phased out in time.&lt;/p&gt;
&lt;p&gt;So why did this take months? Because it wasn't clear what the problem was at first. One casts about with many theories before becoming desperate enough to go "low level" for hours in debugging to capture the above mentioned event's "cold case".&lt;/p&gt;
&lt;p&gt;With the corrected code in place, the above patch removed, things work as they should. Now one goes through all the collateral code/notes and sees how all handing of interrupts is being done, to spot other surprises.&lt;/p&gt;</content><category term="first"></category><category term="386bsd"></category><category term="tale"></category></entry><entry><title>About this 386bsd notebook</title><link href="/About-this-386bsd-notebook.html" rel="alternate"></link><published>2018-12-26T10:52:00-08:00</published><updated>2018-12-26T13:27:00-08:00</updated><author><name>William Jolitz</name></author><id>tag:None,2018-12-26:/About-this-386bsd-notebook.html</id><summary type="html">&lt;p&gt;This blog's about my 386bsd "stuff" - past, present, future.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been putting all my 386bsd archives into github as "work in progress" project. It'll take some time, as it's dozens of drives, cdrom's and hundreds of floppies. I'd like to say it's all nicely, chronologically ordered, but ... boxes of loose materials in an idiosyncratic form. So I'm just throwing it up and integrating it into the github repo as I make sense of things, as I've time.&lt;/p&gt;
&lt;p&gt;This is a &lt;em&gt;"notebook"&lt;/em&gt; of things as I do this, an amalgum of memories, findings, debugging, opinion, observation, and retrospection.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A big thank you to fans/users of 386bsd, my coauthor Lynne, son Benjamin, and daughter Rebecca who have encouraged me to accomplish this.&lt;/strong&gt;&lt;/p&gt;</content><category term="beginning"></category><category term="386bsd"></category><category term="notebook"></category><category term="about"></category></entry></feed>